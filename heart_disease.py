# -*- coding: utf-8 -*-
"""Heart-Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JDfkEu3KHXvzkX7dWcnITUC_-9eLxiCx

##Importing Necessary Libraries
"""

import pandas as pd # Used for data manipulation and analysis.
import numpy as np # NumPy is used for efficient and powerful mathematical operations

"""##Loading the Dataset"""

df= pd.read_csv("dataset_heart.csv") # Loading the dataset using pandas functon

df.columns # Displays the names of the columns

"""##Analyzing the Dataset"""

df # Displays the starting five rows and last 5 rows of the dataset.

df.head() # Displays 1st five rows of the dataset

df.tail() # Displays  last five rows of the dataset

df.shape # Displays the total count of the Rows and Columns respectively.

"""##Plotting histograms to understand the distribution of numerical features."""

import matplotlib.pyplot as plt

# Plot histograms for all numerical features
df.hist(figsize=(12, 12))
plt.show()

"""##Checking if there is any Null value in the Data"""

df.isnull().sum() # Displays the total count of the null valuesin the particular columns.

"""There is no null or missing value in the dataset."""

df.nunique() # Displays the total count of the unique values in the particular columns.

df.info() # Displays the total count of values present in the particular column along with the null count and data type.

# Check for duplicate rows
duplicate_rows = df[df.duplicated()]

if duplicate_rows.empty:
    print("No duplicate values found.")
else:
    print("Duplicate values found:")
    print(duplicate_rows)

df.corr() # computes the correlation matrix for the variables in the DataFrame df.

import seaborn as sns

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['age'], kde=True, color="#FF5733", palette=custom_colors)

"""##Q) Compute and visualize the correlation matrix to understand the relationships between numerical features."""

import seaborn as sns

# Compute the correlation matrix
corr_matrix = df.corr()

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm')
plt.show()

"""##Using box plots to visualize the distribution and detect outliers for numerical features."""

# Plot box plots for all numerical features
plt.figure(figsize=(15, 10))
df.plot(kind='box', subplots=True, layout=(4, 4), sharex=False, sharey=False, figsize=(15, 15))
plt.show()

# Pair plot with hue based on target variable
sns.pairplot(df, hue='heart disease', diag_kind='kde')
plt.show()

"""###Investigate basic statistics: patient counts, presence of heart disease, age distribution, etc."""

# Basic statistics
print("Basic Statistics")
print(df.describe())

# Patient count
patient_count = df.shape[0]
print(f"\nPatient Count: {patient_count}")

# Presence of heart disease
heart_disease_counts = df['heart disease'].value_counts()
print("\nPresence of Heart Disease")
print(heart_disease_counts)

# Age distribution
print("\nAge Distribution")
print(df['age'].describe())

# Visualization
plt.figure(figsize=(10, 5))

# Age distribution histogram
plt.subplot(1, 2, 1)
plt.hist(df['age'], bins=10, edgecolor='black')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Count')

# Heart disease presence bar plot
plt.subplot(1, 2, 2)
sns.countplot(x='heart disease', data=df)
plt.title('Presence of Heart Disease')
plt.xlabel('Heart Disease')
plt.ylabel('Count')

plt.tight_layout()
plt.show()

"""###Q) Analyze the presence of heart disease based on gender, age, and other relevant factors."""

# Count of heart disease by Age
heart_disease_by_gender = df.groupby('age')['heart disease'].value_counts().unstack()
print(heart_disease_by_gender)

# Visualization
plt.figure(figsize=(10, 5))
sns.countplot(x='age', hue='heart disease', data=df)
plt.title('Heart Disease by Age')
plt.xlabel('Gender (0: Female, 1: Male)')
plt.ylabel('Count')
plt.show()

# Summary statistics for age by heart disease presence
age_heart_disease_summary = df.groupby('heart disease')['age'].describe()
print(age_heart_disease_summary)

# Visualization
plt.figure(figsize=(10, 5))
sns.histplot(data=df, x='age', hue='heart disease', multiple='stack', kde=True)
plt.title('Age Distribution by Heart Disease Presence')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

# Count of heart disease by chest pain type
heart_disease_by_chest_pain = df.groupby('chest pain type')['heart disease'].value_counts().unstack()
print(heart_disease_by_chest_pain)

# Visualization
plt.figure(figsize=(10, 5))
sns.countplot(x='chest pain type', hue='heart disease', data=df)
plt.title('Heart Disease by Chest Pain Type')
plt.xlabel('Chest Pain Type')
plt.ylabel('Count')
plt.show()

# Summary statistics for resting blood pressure by heart disease presence
rbp_heart_disease_summary = df.groupby('heart disease')['resting blood pressure'].describe()
print(rbp_heart_disease_summary)

# Visualization
plt.figure(figsize=(10, 5))
sns.boxplot(x='heart disease', y='resting blood pressure', data=df)
plt.title('Resting Blood Pressure by Heart Disease Presence')
plt.xlabel('Heart Disease')
plt.ylabel('Resting Blood Pressure')
plt.show()

# Summary statistics for serum cholesterol by heart disease presence
cholesterol_heart_disease_summary = df.groupby('heart disease')['serum cholestoral'].describe()
print(cholesterol_heart_disease_summary)

# Visualization
plt.figure(figsize=(10, 5))
sns.boxplot(x='heart disease', y='serum cholestoral', data=df)
plt.title('Serum Cholesterol by Heart Disease Presence')
plt.xlabel('Heart Disease')
plt.ylabel('Serum Cholesterol')
plt.show()

# Pair plot to visualize relationships
sns.pairplot(df, hue='heart disease', diag_kind='kde', markers=["o", "s"])
plt.suptitle('Pair Plot of Factors Affecting Heart Disease', y=1.02)
plt.show()

"""##Q)  Explore correlations: Does cholesterol level correlate with the presence of heart disease?"""

from scipy.stats import pearsonr

# Calculating the correlation coefficient
correlation, p_value = pearsonr(df['serum cholestoral'], df['heart disease'])
print(f"Pearson correlation coefficient: {correlation:.2f}")
print(f"P-value: {p_value:.2e}")

"""###Correlation Coefficient: The value of the Pearson correlation coefficient will tell us the strength and direction of the linear relationship. A value close to 1 or -1 indicates a strong linear relationship, while a value close to 0 indicates no linear relationship."""

# Visualize the correlation
plt.figure(figsize=(10, 6))
sns.scatterplot(x='serum cholestoral', y='heart disease', data=df)
sns.regplot(x='serum cholestoral', y='heart disease', data=df, scatter=False, color='red')
plt.title('Correlation between Serum Cholesterol Level and Heart Disease')
plt.xlabel('Serum Cholesterol Level')
plt.ylabel('Heart Disease')
plt.show()

"""###Scatter Plot and Regression Line: The scatter plot with a regression line helps to visually inspect the relationship. If the points are closely clustered around the line, it indicates a strong correlation"""

df1 = pd.DataFrame(df)

# Feature 1: Age Group
def age_group(age):
    if age < 40:
        return 'young'
    elif 40 <= age <= 60:
        return 'middle-aged'
    else:
        return 'elderly'

df['age_group'] = df['age'].apply(age_group)

# Feature 2: Cholesterol to Age Ratio
df['chol_age_ratio'] = df['serum cholestoral'] / df['age']

# Feature 3: Risk Factor Score
# Assuming binary risk factors: fasting blood sugar and exercise induced angina
df['risk_factor_score'] = df['fasting blood sugar'] + df['exercise induced angina']

# Display the DataFrame with the new features
print(df1)

# Age Group Distribution
plt.figure(figsize=(10, 5))
sns.countplot(x='age_group', hue='heart disease', data=df)
plt.title('Heart Disease by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Count')
plt.show()

# Cholesterol to Age Ratio
plt.figure(figsize=(10, 5))
sns.boxplot(x='heart disease', y='chol_age_ratio', data=df)
plt.title('Cholesterol to Age Ratio by Heart Disease')
plt.xlabel('Heart Disease')
plt.ylabel('Cholesterol to Age Ratio')
plt.show()

"""###Cholesterol to Age Ratio: This feature helps normalize cholesterol levels by age, potentially revealing insights not visible in raw cholesterol values."""

# Risk Factor Score
plt.figure(figsize=(10, 5))
sns.countplot(x='risk_factor_score', hue='heart disease', data=df)
plt.title('Heart Disease by Risk Factor Score')
plt.xlabel('Risk Factor Score')
plt.ylabel('Count')
plt.show()

"""###Risk Factor Score: Combines binary indicators of risk into a single score, making it easier to see the combined effect of these risk factors."""

